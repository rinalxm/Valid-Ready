`timescale 1ns/1ns
 
module  valid_ready(
  input        rst_n  ,
  input 	clk 	,   
  input		valid	,
  input	      ready,
  input       data_in ,
  output      data_out,
);       
   reg [1:0]num;
 
    always @(posedge clk or negedge rst_n) begin
        if(!rst_n)   
            num  <= 0;  
        else if( !valid)  
            num  <=(num==3)? 0:num+1; 
    end
   
   always @(posedge clk or negedge rst_n) begin
        if(!rst_n)  
            valid <= 0;
        else if(! ready)  
            valid <=1 ; 
   end

    always @(posedge clk or negedge rst_n) begin
        if(!rst_n)  
             valid <= 0;
        else if(num == 3 && !valid)  
             valid <=1 ; 
        else if(ready&& valid) 
             valid<=0 ;
             ready<=0 ; 

    end
     always @(posedge clk or negedge rst_n) begin
        if(!rst_n)  
            ready <= 0;
        else if( valid )  
            ready <=1 ; 
     
    end
    always @(posedge clk or negedge rst_n) begin
        if(!rst_n)  
            data_out <= 0;
        else if(num == 0 && ready && valid ) 
            data_out <=data_in;
        else if( valid && ready )
            data_out <= data_out + data_in;   
    end
        
endmodule
